---

name: Release

# Trigger the workflow on manual dispatch and when merging a PR.
# If doccmd's version has not changed, the tagging will fail.
# If doccmd's version has changed, the tagging will succeed and a new release will
# be created.
# This means that the version can stay in sync, and if the hook needs to be updated
# to a new version to release changes in this repository, a new release of doccmd is needed.
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    name: Publish a release
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v5
        with:
          # See
          # https://github.com/stefanzweifel/git-auto-commit-action?tab=readme-ov-file#push-to-protected-branches
          token: ${{ secrets.RELEASE_PAT }}
          # Fetch all history including tags.
          # Needed to find the latest tag.
          #
          # Also, avoids
          # https://github.com/stefanzweifel/git-auto-commit-action/issues/99.
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          cache-dependency-glob: '**/pyproject.toml'

      - name: Get current version
        id: get_current_tag
        run: |
          version="$(git describe --tags --abbrev=0)"
          echo "version=${version}" >> "$GITHUB_OUTPUT"

      # We have a race condition.
      # In particular, we push doccmd to PyPI and then not long after we try to install
      # the pushed version.
      # Here, we give PyPI time to propagate the package.
      - name: Install doccmd from PyPI
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 20
          max_attempts: 20
          command: uv sync --refresh

      - name: Get doccmd version
        id: get_version
        run: |
          output=$(uv run doccmd --version)
          version="${output##* }"
          echo "version=${version}" >> "$GITHUB_OUTPUT"

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ steps.get_version.outputs.version }}
          tag_prefix: v

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          makeLatest: true
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

      - name: Update README versions
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: ${{ steps.get_current_tag.outputs.version }}
          replace: ${{ steps.tag_version.outputs.new_tag}}
          include: README.rst
          regex: false

      - uses: stefanzweifel/git-auto-commit-action@v7
        id: commit-readme
        with:
          commit_message: Replace version in README
          branch: main
          file_pattern: README.rst
          # Error if there are no changes.
          skip_dirty_check: true
